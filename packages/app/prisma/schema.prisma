generator client {
  provider        = "prisma-client-js"
  // rhel (Red Hat Enterprise Linux) is for Vercel deployments
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

view AuthUser {
  id               String    @id @db.Uuid
  email            String    @db.VarChar(255)
  createdAt        DateTime  @map("created_at") @db.Timestamptz(6)
  emailConfirmedAt DateTime? @map("email_confirmed_at") @db.Timestamptz(6)
  lastSignInAt     DateTime? @map("last_sign_in_at") @db.Timestamptz(6)
  user             User?

  @@map("auth_users")
}

model User {
  id          String   @id @db.Uuid
  username    String   @unique @db.VarChar(255)
  displayName String   @map("display_name") @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  timezone    String   @db.VarChar(32)

  authUser      AuthUser      @relation(fields: [id], references: [id])
  followers     Follow[]      @relation("following")
  following     Follow[]      @relation("follower")
  eventsCreated Event[]
  events        EventToUser[]
  habits        Habit[]

  timeline TimelineEvent[]

  @@map("users")
}

model Follow {
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  followerId  String   @map("follower_id") @db.Uuid
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId String   @map("following_id") @db.Uuid
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([followerId, followingId])
  @@index([followingId])
  @@map("follows")
}

model Event {
  id            BigInt        @id @default(autoincrement())
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  date          DateTime      @db.Timestamptz(6)
  startTimezone String        @map("start_timezone") @db.VarChar(32)
  // TODO: replace duration with end, add timezone
  duration      Int           @db.Integer // Prisma does not support `interval` type yet
  body          String        @db.VarChar(1024)
  public        Boolean       @default(true)
  authorId      String        @map("author_id") @db.Uuid
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users         EventToUser[]

  @@index([authorId])
  @@index([date])
  @@map("events")
}

model EventToUser {
  eventId BigInt   @map("event_id")
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String   @map("user_id") @db.Uuid
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shared  Boolean  @default(false)
  added   Boolean?

  @@id([eventId, userId])
  @@index([userId])
  @@map("events_to_users")
}

view TimelineEvent {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  date      DateTime @db.Timestamptz(6)
  duration  Int      @db.Integer
  body      String   @db.VarChar(1024)
  public    Boolean  @default(true)
  authorId  String   @map("author_id") @db.Uuid
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId   String   @map("user_id") @db.Uuid
  followed Boolean
  added    Boolean?

  @@map("timeline")
}

model Habit {
  id     BigInt @id @default(autoincrement())
  name   String @db.VarChar(255)
  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  marks HabitMark[]

  @@map("habits")
}

model HabitMark {
  habitId BigInt   @map("habit_id")
  habit   Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date    DateTime @db.Date

  @@id([habitId, date])
  @@map("habit_marks")
}

model JournalEntry {
  authorId String   @map("author_id") @db.Uuid
  date     DateTime @db.Date
  body     String   @db.Text

  @@id([authorId, date])
  @@map("journal_entries")
}
