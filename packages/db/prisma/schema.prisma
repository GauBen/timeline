generator client {
  provider        = "prisma-client"
  output          = "./generated"
  previewFeatures = ["views", "queryCompiler", "driverAdapters"]
  runtime         = "nodejs"
}

datasource db {
  provider = "sqlite"
}

model GoogleUser {
  // Local id
  id    Int    @id @default(autoincrement())
  email String @unique

  accessToken  String? @map("access_token")
  refreshToken String? @map("refresh_token")

  user User?

  @@map("google_users")
}

model User {
  id          Int      @id
  username    String   @unique
  displayName String   @map("display_name")
  createdAt   DateTime @default(now()) @map("created_at")
  timezone    String
  locale      String

  googleUser     GoogleUser     @relation(fields: [id], references: [id])
  followers      Follow[]       @relation("following")
  following      Follow[]       @relation("follower")
  eventsCreated  Event[]
  events         EventToUser[]
  habits         Habit[]
  journalEntries JournalEntry[]
  journalTags    JournalTag[]

  timeline     TimelineEvent[]
  tags         Tag[]
  viewableTags Tag[]           @relation("viewers")

  googleCalendarSyncs GoogleCalendarSync[]

  @@map("users")
}

model Follow {
  createdAt   DateTime @default(now()) @map("created_at")
  followerId  Int      @map("follower_id")
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followingId Int      @map("following_id")
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([followerId, followingId])
  @@index([followingId])
  @@map("follows")
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  /// Event start date and time
  start DateTime

  /// Set to null if relative to the user
  startTimezone String? @map("start_timezone")

  /// Event end date and time
  end DateTime

  /// Set to null if relative to the user
  endTimezone String? @map("end_timezone")

  body     String
  public   Boolean @default(true)
  authorId Int     @map("author_id")

  author         User            @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users          EventToUser[]
  tags           Tag[]
  timelineEvents TimelineEvent[]

  @@index([authorId])
  @@index([start])
  @@index([end])
  @@map("events")
}

model Tag {
  id      Int    @id @default(autoincrement())
  ownerId Int    @map("owner_id")
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name    String
  color   String

  // Whether tagged events are public
  public  Boolean @default(true)
  viewers User[]  @relation("viewers")
  events  Event[]

  googleCalendarSyncs GoogleCalendarSync[]

  @@map("tags")
}

model EventToUser {
  eventId Int      @map("event_id")
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  Int      @map("user_id")
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shared  Boolean  @default(false)
  added   Boolean?

  @@id([eventId, userId])
  @@index([userId])
  @@map("events_to_users")
}

view TimelineEvent {
  id            Int      @unique @default(autoincrement())
  createdAt     DateTime @default(now()) @map("created_at")
  start         DateTime
  startTimezone String?  @map("start_timezone")
  end           DateTime
  endTimezone   String?  @map("end_timezone")
  body          String
  public        Boolean  @default(true)
  authorId      Int      @map("author_id")

  author User  @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  event  Event @relation(fields: [id], references: [id])

  userId   Int      @map("user_id")
  followed Boolean
  added    Boolean?

  @@map("timeline")
}

model Habit {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int    @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  marks HabitMark[]

  @@map("habits")
}

model HabitMark {
  habitId Int      @map("habit_id")
  date    DateTime

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([habitId, date])
  @@map("habit_marks")
}

model JournalEntry {
  authorId Int      @map("author_id")
  date     DateTime
  body     String

  author User         @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tags   JournalTag[]

  @@id([authorId, date])
  @@map("journal_entries")
}

model JournalTag {
  authorId Int      @map("author_id")
  date     DateTime
  tag      String

  author User         @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  entry  JournalEntry @relation(fields: [authorId, date], references: [authorId, date], onDelete: Cascade, onUpdate: Cascade)

  @@id([authorId, tag, date])
  @@map("journal_tags")
}

enum SyncDirection {
  Both
  Pull
  Push
}

model GoogleCalendarSync {
  id               Int           @id @default(autoincrement())
  userId           Int           @map("user_id")
  tagId            Int           @map("tag_id")
  googleCalendarId String        @map("calendar_id")
  direction        SyncDirection

  lastSyncedAt DateTime? @map("last_synced_at")
  syncToken    String?   @map("sync_token")
  pullCount    Int       @default(0) @map("pull_count")
  pushCount    Int       @default(0) @map("push_count")
  syncedEvents Int       @default(0) @map("synced_events")
  syncError    Json      @default("null") @map("sync_errors")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, googleCalendarId])
  @@index([tagId])
  @@map("google_calendar_syncs")
}
